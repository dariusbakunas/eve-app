"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type Alliance {
  id: ID!
  name: String!
  ticker: String!
}

type Blueprint {
  id: ID!
  character: Character!
  item: InvItem!
  isCopy: Boolean!
  maxRuns: Int!
  materialEfficiency: Int!
  timeEfficiency: Int!
}

input BlueprintFilter {
  characterId: ID
}

enum BlueprintsOrderBy {
  character
  name
  groupName
  maxRuns
  materialEfficiency
  timeEfficiency
}

input BlueprintsOrderByInput {
  column: BlueprintsOrderBy!
  order: Order!
}

type BlueprintsResponse {
  total: Int!
  entries: [Blueprint!]!
}

type BuildInfo {
  materials: [BuildMaterial!]!
  product: InvItem!
  quantity: Int!
  time: Int!
  productionLimit: Int!
}

type BuildMaterial {
  item: InvItem!
  quantity: Int!
}

type Character {
  id: ID!
  corporation: Corporation!
  name: String!
  gender: String!
  scopes: [String!]
  birthday: DateTime!
  securityStatus: Float!
  skillGroups: [SkillGroup!]!
  skillGroup(id: ID!): SkillGroup
  skillQueue: [SkillQueueItem!]!
  totalSp: Int
}

type CharacterMarketOrder {
  id: ID!

  """Character who issued the order"""
  character: Character!

  """
  Number of days for which order is valid (starting from the issued date). An order expires at time issued + duration
  """
  duration: Int!

  """For buy orders, the amount of ISK in escrow"""
  escrow: Float

  """Item transacted in this order"""
  item: InvItem!

  """True if this is buy order"""
  isBuy: Boolean!

  """
  Signifies whether the buy/sell order was placed on behalf of a corporation
  """
  isCorporation: Boolean!

  """Location where order was placed"""
  location: Location!

  """
  For buy orders, the minimum quantity that will be accepted in a matching sell order
  """
  minVolume: Int

  """Date and time when this order was issued"""
  issued: DateTime!

  """Cost per unit for this order"""
  price: Float!

  """Valid order range, numbers are ranges in jumps"""
  range: String!

  """Quantity of items still required or offered"""
  volumeRemain: Int!

  """Quantity of items required or offered at time order was placed"""
  volumeTotal: Int!

  """Current order state"""
  state: OrderState!
}

input CharacterMarketOrderFilter {
  characterId: ID
  state: OrderStateFilter
}

enum CharacterMarketOrderOrderBy {
  issued
}

input CharacterMarketOrderOrderByInput {
  column: CharacterMarketOrderOrderBy!
  order: Order!
}

type CharacterMarketOrders {
  total: Int!
  orders: [CharacterMarketOrder!]!
}

type Client {
  id: ID!
  name: String!
  category: String!
}

type Corporation {
  id: ID!
  alliance: Alliance
  dateFounded: DateTime
  name: String!
  memberCount: Int!
  taxRate: Float!
  ticker: String!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type IndustryActivity {
  id: ID!
  name: String!
}

type IndustryJob {
  id: ID!
  activity: IndustryActivity!

  """The sum of job installation fee and industry facility tax"""
  cost: Float

  """Date and time when this job finished"""
  endDate: DateTime!

  """Character which installed this job"""
  installer: Character!

  """Number of runs blueprint is licensed for"""
  licensedRuns: Int

  """
  Date and time when this job was paused (i.e. time when the facility where this job was installed went offline)
  """
  pauseDate: DateTime

  """Chance of success for invention"""
  probability: Float

  """Product (manufactured, copied or invented)"""
  product: InvItem

  """Date and time when this job started"""
  startDate: DateTime!

  """Status string"""
  status: String!

  """
  Number of runs for a manufacturing job, or number of copies to make for a blueprint copy
  """
  runs: Int!

  """
  Number of successful runs for this job. Equal to runs unless this is an invention job
  """
  successfulRuns: Int
}

input IndustryJobFilter {
  installerId: ID
}

enum IndustryJobOrderBy {
  startDate
}

input IndustryJobOrderByInput {
  column: IndustryJobOrderBy!
  order: Order!
}

type IndustryJobs {
  total: Int!
  jobs: [IndustryJob!]!
}

type InvCategory {
  id: ID!
  name: String!
}

type InvGroup {
  id: ID!
  name: String!
  category: InvCategory!
}

type InvItem {
  id: ID!
  name: String!
  mass: Float!
  volume(packaged: Boolean = true): Float!
  invGroup: InvGroup!

  """default: Jita"""
  marketPrice(systemId: ID = 30000142): ItemMarketPrice
}

input InvItemFilter {
  name: String
  categoryIds: [ID!]
}

type ItemMarketPrice {
  buy: Float
  sell: Float
}

type JournalEntries {
  total: Int!
  entries: [JournalEntry!]!
}

type JournalEntry {
  id: ID!
  amount: Float!
  balance: Float!
  character: Character!
  date: DateTime!
  description: String
}

type Location {
  id: ID!
  name: String!
}

type MarketGroup {
  id: ID!
  name: String!
}

type Mutation {
  addCharacter(code: String!): Character!
  updateCharacter(id: ID!, code: String!): Character!
  removeCharacter(id: ID!): ID!
  register(input: RegistrationInput!): User!
  addItemsToWarehouse(id: ID!, input: [WarehouseItemInput!]!): [WarehouseItem!]!
  updateItemsInWarehouse(id: ID!, input: [WarehouseItemInput!]!): [WarehouseItem!]!
  removeItemsFromWarehouse(id: ID!, itemIds: [ID!]!): [ID!]!
  addWarehouse(name: String!): Warehouse!
  removeWarehouse(id: ID!): ID!
  updateWarehouse(id: ID!, name: String!): Warehouse!
}

enum Order {
  asc
  desc
}

enum OrderState {
  active
  cancelled
  expired
}

input OrderStateFilter {
  active: Boolean
  expired: Boolean
  cancelled: Boolean
}

enum OrderType {
  buy
  sell
}

input PageInput {
  index: Int = 0
  size: Int = 10
}

enum ProcessingCategory {
  WALLET_TRANSACTIONS
  WALLET_JOURNAL
  BOOKMARKS
  MARKET_ORDERS
  ASSETS
  CALENDAR
  BLUEPRINTS
  CLONES
  IMPLANTS
  CONTACTS
  INDUSTRY_JOBS
  STATS
  SKILLS
  SKILL_QUEUE
}

type ProcessingLogEntry {
  id: ID!
  createdAt: DateTime!
  character: Character
  category: ProcessingCategory!
  status: ProcessingStatus!
  message: String!
  error: String
}

input ProcessingLogFilter {
  characterIds: [ID!]
}

enum ProcessingStatus {
  SUCCESS
  FAILURE
}

type Query {
  blueprints(page: PageInput, filter: BlueprintFilter, orderBy: BlueprintsOrderByInput): BlueprintsResponse!
  buildInfo(blueprintId: ID!): BuildInfo
  character(id: ID!): Character
  characters: [Character!]!
  industryJobs(page: PageInput, filter: IndustryJobFilter, orderBy: IndustryJobOrderByInput): IndustryJobs!
  invItems(filter: InvItemFilter): [InvItem!]!
  processingLogs(filter: ProcessingLogFilter): [ProcessingLogEntry!]!
  scopes: [Scope!]!
  userByEmail(email: String!): User
  characterMarketOrders(page: PageInput, filter: CharacterMarketOrderFilter, orderBy: CharacterMarketOrderOrderByInput): CharacterMarketOrders!
  walletJournal(page: PageInput, filter: WalletJournalFilter, orderBy: WalletJournalOrderByInput): JournalEntries!
  walletTransactions(page: PageInput, filter: WalletTransactionFilter, orderBy: WalletTransactionOrderByInput): WalletTransactions!
  walletTransactionSummary(ids: [ID!]!): WalletTransactionSummary!
  walletTransactionIds(filter: WalletTransactionFilter): [ID!]!
  warehouseItems(itemIds: [ID!]!, warehouseIds: [ID!]): [WarehouseItem!]
  warehouse(id: ID!): Warehouse
  warehouses: [Warehouse!]!
}

input RegistrationInput {
  username: String!
  email: String!
  code: String!
}

type Scope {
  id: ID!
  name: String!
}

type Skill {
  id: ID!
  name: String!
  multiplier: Int
  activeSkillLevel: Int
  trainedSkillLevel: Int
  skillPointsInSkill: Int
}

type SkillGroup {
  id: ID!
  name: String!
  skills: [Skill!]!
  totalSp: Int
  totalLevels: Int
  trainedSp: Int
}

type SkillQueueItem {
  position: Int!
  finishDate: DateTime
  finishedLevel: Int!
  levelEndSp: Int!
  levelStartSp: Int!
  skill: Skill
  startDate: DateTime
  trainingStartSp: Int!
}

"""
A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format
outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Time

type User {
  id: ID!
  username: String!
  email: String!
  status: UserStatus!
}

enum UserStatus {
  ACTIVE
  INACTIVE
  NOT_VERIFIED
}

input WalletJournalFilter {
  characterId: ID
}

enum WalletJournalOrderBy {
  date
  amount
  character
  balance
  description
}

input WalletJournalOrderByInput {
  column: WalletJournalOrderBy!
  order: Order!
}

type WalletTransaction {
  id: ID!
  credit: Float!
  client: Client!
  character: Character!
  date: DateTime!
  isBuy: Boolean!
  item: InvItem!
  location: Location!
  marketGroup: MarketGroup
  quantity: Int!
  unitPrice: Float!
}

input WalletTransactionFilter {
  ids: [ID!]
  item: String
  characterIds: [ID!]
  orderType: OrderType
}

enum WalletTransactionOrderBy {
  date
  client
  character
  credit
  invGroup
  item
  quantity
  station
  unitPrice
}

input WalletTransactionOrderByInput {
  column: WalletTransactionOrderBy!
  order: Order!
}

type WalletTransactions {
  total: Int!
  lastUpdate: DateTime
  transactions: [WalletTransaction!]!
}

type WalletTransactionSummary {
  items: [WalletTransactionSummaryItem!]!
}

type WalletTransactionSummaryItem {
  id: ID!
  name: String!
  quantity: Int!
  credit: Float!
}

type Warehouse {
  id: ID!
  name: String!
  items: [WarehouseItem!]!
  summary: WarehouseSummary!
}

type WarehouseItem {
  warehouse: Warehouse!
  item: InvItem!
  quantity: Int!
  unitCost: Float!
}

input WarehouseItemInput {
  id: ID!
  quantity: Int!
  unitCost: Float!
}

type WarehouseSummary {
  totalCost: Float!
  totalVolume: Float!
}
